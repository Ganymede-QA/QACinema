{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadnaeem/Desktop/reactApps/project1/src/Cloak.js\";\nimport React, { Component } from 'react';\nexport default class Clock extends Component {\n  // Constructor\n  constructor(props) {\n    super(props); // Initalising some states \n\n    this.stateHandle = () => {\n      console.log(\"stateHandle sets the time as :\" + this.state.date);\n      this.setState({\n        text: \"Updated\"\n      });\n    };\n\n    this.stateHandle2 = () => {\n      console.log(\"stateHandle2 sets the time as :\" + this.state.date);\n      clearInterval(this.timerID);\n      this.setState({\n        text: \"Updated and timer has stopped\"\n      });\n    };\n\n    this.shouldHandle = () => {\n      console.log(\"shouldHandle sets the time as :\" + this.state.date);\n      this.setState({\n        boolForShould: !this.state.boolForShould\n      });\n    };\n\n    this.state = {\n      date: new Date(),\n      text: \"\",\n      boolForShould: true\n    };\n    console.log(\"Constructor sets the time as : \" + this.state.date);\n  } // invoked before mounting occurs and called before render()\n\n\n  componentWillMount() {\n    console.log(`ComponentWillMount sets the time as` + this.state.date);\n  } // Called straight after mounting occurs\n\n\n  componentDidMount() {\n    console.log(\"componentDidMount sets the time as :\" + this.state.date); // Method that ticks every second incrementing timerID by 1 every second\n\n    this.timerID = setInterval(() => this.tick(), 1000);\n  } // invoked just before rending occurs so can be used as preperation for a render.\n\n\n  componentWillUpdate() {\n    console.log(\"componentWillUpdate sets the time as :\" + this.state.date);\n  } // invoked before component is unmounted and deleted. Good to perform clean ups\n\n\n  componentWillUnmount() {\n    console.log(\"componentWillUnmount sets the time as :\" + this.state.date);\n    clearInterval(this.timerID);\n  } // If false is returne then componentWillUpdate is not invoked.\n\n\n  shouldComponentUpdate() {\n    console.log(\"shouldComponentUpdate sets the time as :\" + this.state.date);\n    return this.state.boolForShould;\n  } // Invoked after comomnent is updated and rendered.\n\n\n  componentDidUpdate() {\n    console.log(\"componentDidUpdate sets the time as :\" + this.state.date);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, this.state.text), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, \"It is \", this.state.date.toLocaleTimeString()), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.stateHandle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, \"Changes State\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.stateHandle2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, \" Changes State and stops timer \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.shouldHandle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, \" Changes shouldComponentUpdate \"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ahmadnaeem/Desktop/reactApps/project1/src/Cloak.js"],"names":["React","Component","Clock","constructor","props","stateHandle","console","log","state","date","setState","text","stateHandle2","clearInterval","timerID","shouldHandle","boolForShould","Date","componentWillMount","componentDidMount","setInterval","tick","componentWillUpdate","componentWillUnmount","shouldComponentUpdate","componentDidUpdate","render","toLocaleTimeString"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nexport default class Clock extends Component{\n    // Constructor\n    constructor(props){\n        super(props)\n        // Initalising some states \n        this.state={\n            date: new Date(), \n            text: \"\", \n            boolForShould: true}\n            console.log(\"Constructor sets the time as : \"+ this.state.date);\n    }\n\n    // invoked before mounting occurs and called before render()\n    componentWillMount(){\n        console.log(`ComponentWillMount sets the time as` + this.state.date);\n    }\n\n    // Called straight after mounting occurs\n    componentDidMount() {\n        console.log(\"componentDidMount sets the time as :\" + this.state.date);\n        // Method that ticks every second incrementing timerID by 1 every second\n        this.timerID = setInterval(() => this.tick(), 1000);\n    }\n\n    // invoked just before rending occurs so can be used as preperation for a render.\n    componentWillUpdate() {\n        console.log(\"componentWillUpdate sets the time as :\" + this.state.date);\n    }\n\n    // invoked before component is unmounted and deleted. Good to perform clean ups\n    componentWillUnmount() {\n        console.log(\"componentWillUnmount sets the time as :\" + this.state.date);\n        clearInterval(this.timerID);\n    }\n\n    // If false is returne then componentWillUpdate is not invoked.\n    shouldComponentUpdate() {\n        console.log(\"shouldComponentUpdate sets the time as :\" + this.state.date);\n        return this.state.boolForShould;\n    }\n\n    // Invoked after comomnent is updated and rendered.\n    componentDidUpdate() {\n        console.log(\"componentDidUpdate sets the time as :\" + this.state.date);\n    }\n\n    tick(){\n        this.setState({ date : new Date() });\n    }\n\n    stateHandle = () => {\n        console.log(\"stateHandle sets the time as :\" + this.state.date);\n        this.setState({\n            text: \"Updated\"\n        });\n    };\n    \n    stateHandle2 = () => {\n        console.log(\"stateHandle2 sets the time as :\" + this.state.date);\n        clearInterval(this.timerID);\n        this.setState({\n            text: \"Updated and timer has stopped\"\n        });\n    };\n    \n    shouldHandle = () => {\n        console.log(\"shouldHandle sets the time as :\" + this.state.date);\n        this.setState({\n            boolForShould: !this.state.boolForShould\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>{this.state.text}</h1>\n                <h2>It is {this.state.date.toLocaleTimeString()}</h2>\n                <button onClick={this.stateHandle}>Changes State</button>\n                <button onClick={this.stateHandle2}> Changes State and stops timer </button>\n                <button onClick={this.shouldHandle}> Changes shouldComponentUpdate </button>\n            </div>\n        );\n    }\n\n\n\n\n}"]},"metadata":{},"sourceType":"module"}